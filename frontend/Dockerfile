# Берем слепок из образа node
# С помощью директивы AS можно дать образу имя
FROM node:18-alpine AS builder
# указываем рабочую директорию и сохраняем новый слой
WORKDIR /app
# установка зависимостей
# астериск ("*") по возможности скопирует оба файла: package.json и package-lock.json
# тот же символ делает копирование опциональным, т. е. без файла сборка не упадёт
COPY package*.json ./
# Устанавливаем зависимости
RUN npm i --legacy-peer-deps
# Копируем исходный код и собираем приложение
COPY . .
RUN npm run build
# после сборки приложения внутри контейнера нам больше не нужен исходный код
RUN rm -rf ./src 

FROM nginx:1.23.1-alpine AS frontend
# указываем рабочую директорию и сохраняем новый слой
WORKDIR /app
# Заменяем дефолтную страницу nginx соответствующей веб-приложению
COPY --from=builder /app/build /usr/share/nginx/html
COPY nginx/conf.d/default.conf /etc/nginx/conf.d
EXPOSE 8081
#https://proglib.io/p/kak-zapustit-nginx-v-docker-2020-05-12
#В последней строке указывается точка входа образа для команды: 
CMD ["nginx", "-g", "daemon off;"]
 #Это гарантирует, что Nginx останется «на переднем плане», так что Docker
 #сможет правильно отслеживать процесс (в противном случае контейнер 
 #остановится сразу после запуска).
